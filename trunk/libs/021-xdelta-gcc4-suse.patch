suse patches for xdelta (and for loki_patch.) apply on top of redhat patches.

diff -urNp loki-20050820~suse~/xdelta-1.1.3/libedsio/default.c loki-20050820/xdelta-1.1.3/libedsio/default.c
--- loki-20050820~suse~/xdelta-1.1.3/libedsio/default.c	2005-08-22 01:31:29.000000000 +0300
+++ loki-20050820/xdelta-1.1.3/libedsio/default.c	2005-08-22 01:46:02.000000000 +0300
@@ -7,6 +7,7 @@
  * Author: Josh MacDonald <jmacd@CS.Berkeley.EDU>
  */
 
+#include <stdint.h>
 #include "edsio.h"
 
 /* Default Sink methods
@@ -148,6 +149,9 @@ source_type_default (SerialSource* sourc
     {
       if (! source->next_uint32 (source, &source->alloc_total))
 	return ST_Error;
+      /* Work around stupid assumption that sizeof(void*) is the same
+	 everywhere. */
+      source->alloc_total *= sizeof (void *);
     }
 
   return x;
@@ -294,7 +298,7 @@ serializeio_source_alloc (SerialSource* 
 
       source->alloc_buf = source->alloc_buf_orig;
 
-	  { long x = (long)source->alloc_buf; ALIGN_8 (x); source->alloc_buf = (void*)x; }
+	  { intptr_t x = (intptr_t) source->alloc_buf; ALIGN_8 (x); source->alloc_buf = (void *) x; }
 
     }
 
diff -urNp loki-20050820~suse~/xdelta-1.1.3/libedsio/edsio.c loki-20050820/xdelta-1.1.3/libedsio/edsio.c
--- loki-20050820~suse~/xdelta-1.1.3/libedsio/edsio.c	2001-09-24 09:48:52.000000000 +0300
+++ loki-20050820/xdelta-1.1.3/libedsio/edsio.c	2005-08-22 01:31:13.000000000 +0300
@@ -296,7 +296,7 @@ edsio_time_of_day (SerialGenericTime* se
   struct timeval tv;
   time_t t = time (NULL);
 
-  if (t < 0)
+  if (t == ((time_t)-1))
     {
       edsio_generate_errno_event (EC_EdsioTimeFailure);
       goto bail;
diff -urNp loki-20050820~suse~/xdelta-1.1.3/libedsio/edsiotest.c loki-20050820/xdelta-1.1.3/libedsio/edsiotest.c
--- loki-20050820~suse~/xdelta-1.1.3/libedsio/edsiotest.c	2001-06-12 06:16:41.000000000 +0300
+++ loki-20050820/xdelta-1.1.3/libedsio/edsiotest.c	2005-08-22 01:48:27.000000000 +0300
@@ -48,6 +48,7 @@ test2 ()
   const char* str = "hello there";
   const char* str2;
   guint32 str2_len;
+  const char ** str2_ptr = &str2;
 
   PropTest *pt = g_new0 (PropTest, 1);
 
@@ -63,12 +64,12 @@ test2 ()
 
   g_assert (proptest_isset_bytes (pt, prop));
 
-  g_assert (proptest_get_bytes (pt, prop, (const guint8**) & str2, & str2_len) && str2_len == (strlen (str) + 1) && strcmp (str, str2) == 0);
+  g_assert (proptest_get_bytes (pt, prop, (const guint8**) str2_ptr, & str2_len) && str2_len == (strlen (str) + 1) && strcmp (str, str2) == 0);
 
   /* kill the cache, to test persistence. */
   pt->_edsio_property_table = NULL;
 
-  g_assert (proptest_get_bytes (pt, prop, (const guint8**) & str2, & str2_len) && str2_len == (strlen (str) + 1) && strcmp (str, str2) == 0);
+  g_assert (proptest_get_bytes (pt, prop, (const guint8**) str2_ptr, & str2_len) && str2_len == (strlen (str) + 1) && strcmp (str, str2) == 0);
 
   g_assert (proptest_unset_bytes (pt, prop));
 
diff -urNp loki-20050820~suse~/xdelta-1.1.3/libedsio/fh.c loki-20050820/xdelta-1.1.3/libedsio/fh.c
--- loki-20050820~suse~/xdelta-1.1.3/libedsio/fh.c	2001-06-12 06:16:41.000000000 +0300
+++ loki-20050820/xdelta-1.1.3/libedsio/fh.c	2005-08-22 01:33:31.000000000 +0300
@@ -92,6 +92,9 @@ handle_source_type (SerialSource* source
     {
       if (! ssource->fh->table->table_handle_getui (ssource->fh, &source->alloc_total))
 	return ST_Error;
+      /* Work around stupid assumption that sizeof(void*) is the same
+	 everywhere. */
+      source->alloc_total *= sizeof (void *);
     }
 
   return x;
diff -urNp loki-20050820~suse~/xdelta-1.1.3/xdelta.c loki-20050820/xdelta-1.1.3/xdelta.c
--- loki-20050820~suse~/xdelta-1.1.3/xdelta.c	2005-08-22 01:31:29.000000000 +0300
+++ loki-20050820/xdelta-1.1.3/xdelta.c	2005-08-22 01:49:35.000000000 +0300
@@ -1401,12 +1401,13 @@ xdp_control_read (XdeltaStream    *cont_
 {
   SerialSource* src = handle_source (cont_in);
   XdeltaControl* cont;
+  XdeltaControl** cont_ptr = &cont;
   SerialType type;
 
   if (! src)
     return NULL;
 
-  if (! serializeio_unserialize_generic_acceptable (src, ST_XdeltaControl | ST_Version0Control, & type, (void**) & cont))
+  if (! serializeio_unserialize_generic_acceptable (src, ST_XdeltaControl | ST_Version0Control, & type, (void **) cont_ptr))
     return NULL;
 
   if (type == ST_Version0Control)
diff -urNp loki-20050820~suse~/xdelta-1.1.3/xdmain.c loki-20050820/xdelta-1.1.3/xdmain.c
--- loki-20050820~suse~/xdelta-1.1.3/xdmain.c	2005-08-22 01:31:29.000000000 +0300
+++ loki-20050820/xdelta-1.1.3/xdmain.c	2005-08-22 01:44:23.000000000 +0300
@@ -1048,7 +1048,7 @@ xd_handle_read (XdFileHandle *fh, char *
 
   if (! (fh->in_read) (fh, buf, nbyte)) /* This is suspicious */
     {
-      xd_error ("read failed: %s\n", g_strerror (errno));
+      xd_error ("read failed: %s\n", errno?g_strerror (errno):"Unexpected end of file");
       return -1;
     }
 
@@ -1210,7 +1210,7 @@ static gssize
 xd_handle_map_page (XdFileHandle *fh, guint pgno, const guint8** mem)
 {
   LRU* lru;
-  guint to_map;
+  gint to_map;
 
 #ifdef DEBUG_MAP
   g_print ("map %p:%d\n", fh, pgno);
@@ -1284,7 +1284,7 @@ xd_handle_map_page (XdFileHandle *fh, gu
 	      return -1;
 	    }
 #else
-	  if (! (lru->buffer = mmap (NULL, to_map, PROT_READ, MAP_PRIVATE, fh->fd, pgno * XD_PAGE_SIZE)))
+	  if ( (lru->buffer = mmap (NULL, to_map, PROT_READ, MAP_PRIVATE, fh->fd, pgno * XD_PAGE_SIZE)) == MAP_FAILED )
 	    {
 	      xd_error ("mmap failed: %s\n", g_strerror (errno));
 	      return -1;
@@ -1489,7 +1489,7 @@ delta_command (gint argc, gchar** argv)
   XdeltaSource* src;
   XdeltaControl* cont;
   gboolean from_is_compressed = FALSE, to_is_compressed = FALSE;
-  guint32 control_offset, header_offset;
+  gint32 control_offset, header_offset;
   const char* from_name, *to_name;
   guint32 header_space[HEADER_WORDS];
   int fd;

